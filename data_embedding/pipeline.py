# data_embedding/pipeline.py

import os
import sys

# =============================================================================
# --- Path Setup ---
# This is the essential block that makes everything work.
# It adds the project's root directory ('RecoMind/') to Python's path.
# =============================================================================
try:
    # Get the path of the current file's directory (e.g., .../RecoMind/data_embedding)
    current_dir = os.path.dirname(os.path.abspath(__file__))
    # Get the path of the project's root directory by going up one level
    project_root = os.path.dirname(current_dir)

    # Add the project root to the Python path if it's not already there
    if project_root not in sys.path:
        sys.path.insert(0, project_root)
except Exception as e:
    print(f"Error setting up python path: {e}")
    sys.exit(1)

# =============================================================================
# --- Main Application Imports ---
# Now that the path is set up, these imports will work correctly.
# =============================================================================
from data_embedding.database_scanner import DatabaseScanner
from data_embedding.description_generator import DescriptionGenerator
from data_embedding.vector_store import VectorStore
from shared import config
from . import embedding_config

def run_ingestion_pipeline():
    """
    The main function that orchestrates the entire ingestion process.
    """
    print(f"DEBUG: API Key Loaded✅" if embedding_config.OPENROUTER_API_KEY else "DEBUG: API Key Missing❌")
    
    print("--- Starting Ingestion Pipeline ---")

    scanner = DatabaseScanner()
    tables_data = scanner.scan_tables()

    if not tables_data:
        print("Pipeline aborted: No table data was found by the scanner.")
        return

    generator = DescriptionGenerator()
    data_with_descriptions = generator.generate_for_tables(tables_data)

    if not data_with_descriptions:
        print("Pipeline aborted: No descriptions were generated by the LLM.")
        return

    vector_db = VectorStore()
    vector_db.save(data_with_descriptions)

    print("\n--- Ingestion Pipeline Completed Successfully! ---")


if __name__ == "__main__":
    run_ingestion_pipeline()